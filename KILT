// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

contract KILT is ERC20 {
    address public immutable treasuryAddress;    
    address public immutable migrationContract;
    uint256 public constant TREASURY_AMOUNT = 13_587_418 * 10**18;
    uint256 public constant MIGRATION_AMOUNT = TOTAL_SUPPLY - TREASURY_AMOUNT;
    uint256 public constant TOTAL_SUPPLY = 290_560_000 * 10**18;

    event KILTDeployed(address indexed migrationContract, address indexed treasuryAddress, uint256 treasuryAmount, uint256 migrationAmount);

    constructor(address _migrationContract, address _treasuryAddress) 
        ERC20("KILT Protocol", "KILT")
    {
        require(_migrationContract != address(0), "KILT: Migration contract cannot be zero address");
        require(_treasuryAddress != address(0), "KILT: Treasury address cannot be zero address");
        
        migrationContract = _migrationContract;
        treasuryAddress = _treasuryAddress;

        _mint(_treasuryAddress, TREASURY_AMOUNT);
        _mint(_migrationContract, MIGRATION_AMOUNT);
        
        emit KILTDeployed(_migrationContract, _treasuryAddress, TREASURY_AMOUNT, MIGRATION_AMOUNT);
    }

    function decimals() public pure override returns (uint8) {
        return 18;
    }
}
